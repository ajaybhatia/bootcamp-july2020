# '''
# Highly divisible triangular number

# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
# '''


def triangular_number(n):
    return n * (n+1)//2


def factors(n):
    count = 0
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            if n // i != i:
                count += 2
            else:
                count += 1
    return count


num = 1
while True:
    tri = triangular_number(num)
    facs = factors(tri)
    if facs > 500:
        print(tri)
        break
    num += 1


# def gcd(a, b):
#     while b > 0:
#         a, b = b, b % a
#     return a


# def lcm(a, b):
#     return (a*b) // gcd(a, b)


# def factors_count(num):
#     i = 1
#     while i <= num:
#       l = lcm(i, num)
